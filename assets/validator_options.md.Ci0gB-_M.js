import{_ as e,c as o,o as d,ag as a}from"./chunks/framework.S-Qvb3wi.js";const u=JSON.parse('{"title":"Options","description":"","frontmatter":{},"headers":[],"relativePath":"validator/options.md","filePath":"validator/options.md"}'),r={name:"validator/options.md"};function i(n,t,c,s,l,h){return d(),o("div",null,t[0]||(t[0]=[a('<h1 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h1><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><a href="#specsource"><code>specSource</code></a></td><td><code>{ type: &quot;object&quot;; spec: OpenAPISpec } | { type: &quot;url&quot;; spec: string } | { type: &quot;file&quot;; spec: string }</code></td><td>—</td><td>Provide your OpenAPI 3.x spec as an object, or point to it via URL or file path.</td></tr><tr><td><a href="#requestvalidation"><code>requestValidation</code></a></td><td><code>RequestValidationOptions</code></td><td>see <a href="#requestvalidation">below</a></td><td>Controls validation of incoming requests.</td></tr><tr><td><a href="#responsevalidation"><code>responseValidation</code></a></td><td><code>ResponseValidationOptions</code></td><td>see <a href="#responsevalidation">below</a></td><td>Controls validation of outgoing responses.</td></tr><tr><td><a href="#ajv"><code>ajv</code></a></td><td><code>Ajv | { options?: AjvOptions; configure?: (ajv: Ajv) =&gt; void }</code></td><td>see <a href="#ajv">below</a></td><td>Override the default ajv instance or configure it</td></tr><tr><td><code>precompileSchemas</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Precompile all route schemas during application bootstrap. This removes the first-request latency at the cost of longer start-up time.</td></tr><tr><td><code>debug</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Verbose logs for troubleshooting.</td></tr></tbody></table><h3 id="specsource" tabindex="-1"><code>specSource</code> <a class="header-anchor" href="#specsource" aria-label="Permalink to &quot;`specSource`&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Type</th><th>Type</th><th>Typical use</th></tr></thead><tbody><tr><td><code>&quot;object&quot;</code></td><td><code>OpenAPISpec</code></td><td>Static spec object.</td></tr><tr><td><code>&quot;url&quot;</code></td><td><code>string</code></td><td>Link to a centralized or externally hosted spec.</td></tr><tr><td><code>&quot;file&quot;</code></td><td><code>string</code></td><td>Local file path to a json file.</td></tr></tbody></table><h3 id="requestvalidation" tabindex="-1"><code>requestValidation</code> <a class="header-anchor" href="#requestvalidation" aria-label="Permalink to &quot;`requestValidation`&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>enable</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Enable request validation globally.</td></tr><tr><td><code>transform</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Coerce/transform inputs where schema allows (e.g., <code>&quot;42&quot;</code> → <code>42</code>).</td></tr><tr><td><code>onValidationFailed</code></td><td><code>(ctx: ExecutionContext, errors: ValidationError[]) =&gt; void | never</code></td><td>throws <code>BadRequestException</code> with validation errors</td><td>Custom handler. Transform, throw your own exception, or log/ignore.</td></tr></tbody></table><h3 id="responsevalidation" tabindex="-1"><code>responseValidation</code> <a class="header-anchor" href="#responsevalidation" aria-label="Permalink to &quot;`responseValidation`&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>enable</code></td><td><code>boolean</code></td><td><code>false</code></td><td>Enable response validation globally.</td></tr><tr><td><code>skipErrorResponses</code></td><td><code>boolean</code></td><td><code>true</code></td><td>Skip validation for error responses (4xx/5xx status codes). Cant validate thrown errors, see <a href="/validator/manual.html#error-response-validation">here</a>.</td></tr><tr><td><code>onValidationFailed</code></td><td><code>(ctx: ExecutionContext, errors: ValidationError[]) =&gt; void | never</code></td><td>warns and throws <code>InternalServer ErrorException</code> without validation errors</td><td>Custom handler. Transform, throw your own exception, or log/ignore.</td></tr></tbody></table><h3 id="ajv" tabindex="-1"><code>ajv</code> <a class="header-anchor" href="#ajv" aria-label="Permalink to &quot;`ajv`&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>(itself)</td><td><code>Ajv</code></td><td>a v8 instance</td><td>Supply a fully configured AJV instance.</td></tr><tr><td><code>options</code></td><td><code>AjvOptions</code></td><td>—</td><td>Initialize the internal AJV with these options (e.g., <code>strict: false</code>).</td></tr><tr><td><code>configure</code></td><td><code>(ajv: Ajv) =&gt; void</code></td><td>—</td><td>Hook to extend the instance (e.g., <code>addFormats(ajv)</code>).</td></tr></tbody></table>',11)]))}const b=e(r,[["render",i]]);export{u as __pageData,b as default};
